{"config":{"system_prompt":"","model":"","temperature":0,"top_p":1,"framework":"nextjs-page-tailwind"},"prompts":[{"prompt":"Turn this userscript into a browser extension. \"// ==UserScript==\n// @name Initium\n// @version 11\n// @description ?\n// @match *://*.core.learn.edgenuity.com/*\n// @match *://student.edgenuity.com/*\n// @grant GM_getValue\n// @grant GM_setValue\n// ==/UserScript==\n\n(function () {\n    'use strict';\n\n    if (window.self === window.top) {\n        window.addEventListener(\"load\", () => {\n            const menuButton = document.getElementById(\"initiumMenuButton\");\n            menuButton.style.display = GM_getValue(\"menuButtonHidden\", false) ? \"none\" : \"block\";\n        });\n\n        document.addEventListener(\"keydown\", function (event) {\n            if (event.shiftKey && event.key === \"Z\") {\n                const menuContainer = document.getElementById(\"initiumMenuContainer\");\n                const backgroundOverlay = document.getElementById(\"initiumBackgroundOverlay\");\n\n                if (menuContainer.style.display === \"none\") {\n                    menuContainer.style.display = \"block\";\n                    backgroundOverlay.style.display = \"block\";\n                } else {\n                    menuContainer.style.display = \"none\";\n                    backgroundOverlay.style.display = \"none\";\n                }\n            }\n        });\n\n        document.addEventListener(\"keydown\", (event) => {\n            if (event.shiftKey && event.key === \"D\") {\n                const menuButton = document.getElementById(\"initiumMenuButton\");\n                const isHidden = menuButton.style.display === \"none\" || menuButton.style.display === \"\";\n                menuButton.style.display = isHidden ? \"block\" : \"none\";\n                GM_setValue(\"menuButtonHidden\", !isHidden);\n            }\n        });\n\n        const menuButton = document.createElement(\"button\");\n        menuButton.id = \"initiumMenuButton\";\n        menuButton.style.position = \"fixed\";\n        menuButton.style.bottom = \"20px\";\n        menuButton.style.right = \"20px\";\n        menuButton.style.zIndex = \"9999\";\n        menuButton.style.background = \"transparent\";\n        menuButton.style.border = \"none\";\n        menuButton.style.padding = \"20px\";\n        menuButton.style.cursor = \"pointer\";\n        menuButton.style.backgroundImage = 'url(\"https://cdn.discordapp.com/attachments/1125852090477051975/1182877216690942074/Y.png\")';\n        menuButton.style.backgroundSize = \"contain\";\n        const storedYPosition = GM_getValue(\"menuButtonYPosition\", \"20px\");\n        menuButton.style.bottom = storedYPosition;\n        document.body.appendChild(menuButton);\n\n        let isDragging = false;\n        let startY = 0;\n\n        menuButton.addEventListener(\"mousedown\", (e) => {\n            isDragging = true;\n            startY = e.clientY;\n        });\n\n        document.addEventListener(\"mousemove\", (e) => {\n            if (isDragging) {\n                const deltaY = startY - e.clientY;\n                const newY = parseInt(menuButton.style.bottom) + deltaY;\n\n                const minHeight = 20;\n                const maxHeight = window.innerHeight - menuButton.clientHeight - 20;\n\n                const constrainedY = Math.min(maxHeight, Math.max(minHeight, newY));\n\n                menuButton.style.bottom = `${constrainedY}px`;\n                startY = e.clientY;\n\n                GM_setValue(\"menuButtonYPosition\", `${constrainedY}px`);\n            }\n        });\n\n        document.addEventListener(\"mouseup\", () => {\n            isDragging = false;\n        });\n\n        const backgroundOverlay = document.createElement(\"div\");\n        backgroundOverlay.id = \"initiumBackgroundOverlay\";\n        backgroundOverlay.style.display = \"none\";\n        backgroundOverlay.style.position = \"fixed\";\n        backgroundOverlay.style.top = \"0\";\n        backgroundOverlay.style.left = \"0\";\n        backgroundOverlay.style.width = \"100%\";\n        backgroundOverlay.style.height = \"100%\";\n        backgroundOverlay.style.backgroundColor = \"rgba(0, 0, 0, 0.5)\";\n        backgroundOverlay.style.zIndex = \"9998\";\n        backgroundOverlay.style.backdropFilter = \"grayscale(100%)\";\n        document.body.appendChild(backgroundOverlay);\n\n        backgroundOverlay.addEventListener(\"click\", () => {\n            toggleMenu();\n        });\n\n        const menuContainer = document.createElement(\"div\");\n        menuContainer.id = \"initiumMenuContainer\";\n        menuContainer.style.display = \"none\";\n        menuContainer.style.position = \"fixed\";\n        menuContainer.style.fontFamily = \"Roboto, sans-serif\";\n        menuContainer.style.userSelect = 'none';\n        menuContainer.style.top = \"50%\";\n        menuContainer.style.background = \"linear-gradient(45deg, #001424, #2A87DE)\";\n        menuContainer.style.left = \"50%\";\n        menuContainer.style.transform = \"translate(-50%, -50%)\";\n        menuContainer.style.zIndex = \"9999\";\n        menuContainer.style.width = \"400px\";\n        menuContainer.style.padding = \"30px\";\n        menuContainer.style.color = \"#FFF\";\n        menuContainer.style.borderRadius = \"10px\";\n        menuContainer.style.boxShadow = \"0px 0px 10px rgba(0, 0, 0, 0.5)\";\n        menuContainer.style.transition = \"transform 0.2s ease-in-out\";\n        document.body.appendChild(menuContainer);\n\n        const titleElement = document.createElement(\"h2\");\n        titleElement.style.textAlign = \"center\";\n        titleElement.style.marginBottom = \"10px\";\n        titleElement.style.fontWeight = \"100\";\n        titleElement.style.fontSize = \"24px\";\n        titleElement.textContent = \"⸻ Initium 1.0 ⸻\";\n        menuContainer.appendChild(titleElement);\n\n        const applyBtn = document.createElement(\"button\");\n        applyBtn.textContent = \"Apply changes?\";\n        applyBtn.style.marginTop = \"10px\";\n        applyBtn.style.padding = \"5px 10px\";\n        applyBtn.style.backgroundColor = \"#111\";\n        applyBtn.style.color = \"#FFF\";\n        applyBtn.style.border = \"none\";\n        applyBtn.style.borderRadius = \"5px\";\n        applyBtn.style.cursor = \"pointer\";\n        applyBtn.style.border = \"1px solid transparent\";\n        applyBtn.style.transition = \"border-color 0.1s ease-out\";\n\n        applyBtn.addEventListener(\"mouseenter\", () => {\n            applyBtn.style.borderColor = \"#FFF\";\n        });\n\n        applyBtn.addEventListener(\"mouseleave\", () => {\n            applyBtn.style.borderColor = \"transparent\";\n        });\n        applyBtn.addEventListener(\"click\", () => {\n            location.reload();\n        });\n        menuContainer.appendChild(applyBtn);\n\n        const minDelayContainer = document.createElement(\"div\");\n        minDelayContainer.style.display = \"flex\";\n        minDelayContainer.style.flexDirection = \"row\";\n\n        const minDelayInput = document.createElement(\"input\");\n        minDelayInput.type = \"number\";\n        minDelayInput.value = GM_getValue(\"minDelay\", 500); \n        minDelayInput.placeholder = \"Set minimum delay (24s recommended)\";\n        minDelayInput.style.marginTop = \"10px\";\n        minDelayInput.style.padding = \"5px 10px\";\n        minDelayInput.style.border = \"none\";\n        minDelayInput.style.borderRadius = \"5px\";\n        minDelayInput.style.flex = \"1\"; \n        minDelayInput.style.backgroundColor = \"#111\"; \n        minDelayInput.style.color = \"#FFF\"; \n        minDelayContainer.appendChild(minDelayInput);\n\n        const setMinDelayButton = document.createElement(\"button\");\n        setMinDelayButton.textContent = \"Set Min Delay\";\n        setMinDelayButton.style.marginTop = \"10px\";\n        setMinDelayButton.style.marginLeft = \"10px\";\n        setMinDelayButton.style.padding = \"5px 10px\";\n        setMinDelayButton.style.backgroundColor = \"#111\";\n        setMinDelayButton.style.color = \"#FFF\";\n        setMinDelayButton.style.border = \"none\";\n        setMinDelayButton.style.borderRadius = \"5px\";\n        setMinDelayButton.style.cursor = \"pointer\";\n        setMinDelayButton.addEventListener(\"click\", () => {\n            const newMinDelay = parseInt(minDelayInput.value, 10) || 500;\n            GM_setValue(\"minDelay\", newMinDelay);\n        });\n\n        minDelayContainer.appendChild(setMinDelayButton);\n\n        menuContainer.appendChild(minDelayContainer);\n\n        const maxDelayContainer = document.createElement(\"div\");\n        maxDelayContainer.style.display = \"flex\";\n        maxDelayContainer.style.flexDirection = \"row\";\n\n        const maxDelayInput = document.createElement(\"input\");\n        maxDelayInput.type = \"number\";\n        maxDelayInput.value = GM_getValue(\"maxDelay\", 1000); \n        maxDelayInput.placeholder = \"Set maximum delay (36s recommended)\";\n        maxDelayInput.style.marginTop = \"10px\";\n        maxDelayInput.style.padding = \"5px 10px\";\n        maxDelayInput.style.border = \"none\";\n        maxDelayInput.style.borderRadius = \"5px\";\n        maxDelayInput.style.flex = \"1\"; \n        maxDelayInput.style.backgroundColor = \"#111\"; \n        maxDelayInput.style.color = \"#FFF\"; \n        maxDelayContainer.appendChild(maxDelayInput);\n\n        const setMaxDelayButton = document.createElement(\"button\");\n        setMaxDelayButton.textContent = \"Set Max Delay\";\n        setMaxDelayButton.style.marginTop = \"10px\";\n        setMaxDelayButton.style.marginLeft = \"10px\";\n        setMaxDelayButton.style.padding = \"5px 10px\";\n        setMaxDelayButton.style.backgroundColor = \"#111\";\n        setMaxDelayButton.style.color = \"#FFF\";\n        setMaxDelayButton.style.border = \"none\";\n        setMaxDelayButton.style.borderRadius = \"5px\";\n        setMaxDelayButton.style.cursor = \"pointer\";\n        setMaxDelayButton.addEventListener(\"click\", () => {\n            const newMaxDelay = parseInt(maxDelayInput.value, 10) || 1000;\n            GM_setValue(\"maxDelay\", newMaxDelay);\n        });\n\n        maxDelayContainer.appendChild(setMaxDelayButton);\n\n        menuContainer.appendChild(maxDelayContainer);\n\n        const toggleMenu = () => {\n            const display = menuContainer.style.display === \"none\" ? \"block\" : \"none\";\n            menuContainer.style.display = display;\n            backgroundOverlay.style.display = display;\n        };\n\n        menuButton.addEventListener(\"click\", toggleMenu);\n\n        const settings = {\n            autoAnswer: GM_getValue(\"autoAnswer\", true),\n            autoStart: GM_getValue(\"autoStart\", false),\n            autoComplete: GM_getValue(\"autoComplete\", false),\n            autoSubmit: GM_getValue(\"autoSubmit\", false),\n        };\n\n        const buttonList = document.createElement(\"ul\");\n        buttonList.style.listStyleType = \"none\";\n        buttonList.style.padding = \"0\";\n\n        const buttonLabels = {\n            autoAnswer: \"Auto Answer\",\n            autoStart: \"Auto Start\",\n            autoComplete: \"Auto Complete\",\n            autoSubmit: \"Auto Submit\",\n        };\n\n        const buttonDescriptions = {\n            autoAnswer: \"Automatically answers questions.\",\n            autoStart: \"Automatically starts any quizzes.\",\n            autoComplete: \"Automatically completes questions on assignments when answered.\",\n            autoSubmit: \"Automatically submits quizzes.\"\n        };\n\n        for (const setting in settings) {\n            if (settings.hasOwnProperty(setting)) {\n                const button = document.createElement(\"button\");\n                button.className = \"setting-button\";\n                button.textContent = buttonLabels[setting];\n                button.title = buttonDescriptions[setting];\n                button.style.marginTop = \"10px\";\n                button.style.padding = \"5px 15px 5px 40px\";\n                button.style.backgroundColor = \"#111\";\n                button.style.color = \"#FFF\";\n                button.style.border = \"none\";\n                button.style.borderRadius = \"5px\";\n                button.style.cursor = \"pointer\";\n                button.style.display = \"block\";\n                button.style.width = \"100%\";\n                button.style.textAlign = \"left\";\n\n                const imageUrls = {\n                    autoAnswer: \"https://cdn.discordapp.com/attachments/1125852090477051975/1182881314471428207/5.png\",\n                    autoStart: 'https://cdn.discordapp.com/attachments/1125852090477051975/1182881313892601896/q.png',\n                    autoComplete: 'https://cdn.discordapp.com/attachments/1125852090477051975/1183038030433497138/p.png',\n                    autoSubmit: 'https://cdn.discordapp.com/attachments/1125852090477051975/1183042721812860928/3.png'\n                };\n\n                button.style.border = \"1px solid transparent\";\n                button.style.transition = \"border-color 0.1s ease-out\";\n\n                button.addEventListener(\"mouseenter\", () => {\n                    button.style.borderColor = \"#FFF\";\n                });\n\n                button.addEventListener(\"mouseleave\", () => {\n                    button.style.borderColor = \"transparent\";\n                });\n\n                button.style.backgroundImage = `url('${imageUrls[setting]}')`;\n                button.style.backgroundSize = \"30px 30px\";\n                button.style.backgroundRepeat = \"no-repeat\";\n                button.style.backgroundPosition = \"10px center\";\n\n                const enabledIndicator = document.createElement(\"img\");\n                enabledIndicator.src = \"https://raw.githubusercontent.com/Databones/Edgesploit/main/img/enabled.png\";\n                enabledIndicator.alt = \"enabled\";\n                enabledIndicator.style.width = \"20%\";\n\n                const disabledIndicator = document.createElement(\"img\");\n                disabledIndicator.src = \"https://raw.githubusercontent.com/Databones/Edgesploit/main/img/disabled.png\";\n                disabledIndicator.alt = \"disabled\";\n                disabledIndicator.style.width = \"20%\";\n\n                button.appendChild(enabledIndicator);\n                button.appendChild(disabledIndicator);\n\n                enabledIndicator.style.display = settings[setting] ? \"inline\" : \"none\";\n                disabledIndicator.style.display = settings[setting] ? \"none\" : \"inline\";\n\n                button.addEventListener(\"click\", () => {\n                    settings[setting] = !settings[setting];\n                    GM_setValue(setting, settings[setting]);\n\n                    enabledIndicator.style.display = settings[setting] ? \"inline\" : \"none\";\n                    disabledIndicator.style.display = settings[setting] ? \"none\" : \"inline\";\n                });\n\n                const listItem = document.createElement(\"li\");\n                listItem.appendChild(button);\n                buttonList.appendChild(listItem);\n            }\n        }\n\n        menuContainer.appendChild(buttonList);\n\n    };\n\n    let answerClicked = false;\n\n    async function getAnswersFromStorage() {\n        const storedAnswers = GM_getValue(\"answers\");\n\n        if (storedAnswers) {\n            return storedAnswers;\n        }\n\n        return new Promise(async (resolve, reject) => {\n            const answersText = prompt(\"Paste your answers text here:\");\n\n            if (answersText) {\n                GM_setValue(\"answers\", answersText);\n                resolve(answersText);\n            } else {\n                reject(new Error(\"No answer text entered. You need to paste the answers in.\"));\n            }\n        });\n    }\n\n    function answerQuiz() {\n        const processElements = (elements) => {\n            elements.forEach((element) => {\n                const id = element.getAttribute(\"for\") || element.getAttribute(\"id\");\n                if (id && answerIDs.includes(id.trim())) {\n                    if (element.tagName === \"LABEL\") {\n                        element.click();\n                    } else if (element.tagName === \"OPTION\") {\n                        element.selected = true;\n                    } else if (element.tagName === \"INPUT\" && element.type === \"checkbox\") {\n                        element.checked = true;\n                    } else if (element.tagName === \"INPUT\" && element.type === \"text\") {\n                        const answerText = getAnswerTextById(id.trim());\n                        if (answerText) {\n                            element.value = answerText;\n                        }\n                    }\n                }\n            });\n        };\n\n        const parentElement = document.body; \n\n        const querySelectors = [\n            \".answer-choice-label[for]\",\n            \"option[id]\",\n            \"input[type='checkbox'][id]\",\n            \"input[type='text'][id]\"\n        ];\n\n        const elementsToClick = [];\n\n        querySelectors.forEach((selector) => {\n            elementsToClick.push(...parentElement.querySelectorAll(selector));\n        });\n\n        const iframe = document.querySelector(\"iframe\");\n\n        if (iframe && iframe.contentDocument) {\n            const iframeElements = [];\n\n            querySelectors.forEach((selector) => {\n                iframeElements.push(...iframe.contentDocument.querySelectorAll(selector));\n            });\n\n            elementsToClick.push(...iframeElements);\n        }\n\n        processElements(elementsToClick);\n    }\n\n    function getAnswerTextById(id) {\n        const answers = answerIDs.split(\"\\n\");\n        for (const answer of answers) {\n            const [answerId, answerText] = answer.split(\":\");\n            if (answerId.trim() === id.trim()) {\n                return answerText.trim().replace(/\"/g, ''); // Remove quotation marks\n            }\n        }\n        return null;\n    }\n\n    let answerIDs = [];\n\n    getAnswersFromStorage().then((answerIDsFromStorage) => {\n        answerIDs = answerIDsFromStorage;\n    });\n\n    function justAnswer() {\n        answerQuiz();\n        clickNextButton();\n        if (settings.autoComplete) {\n            function setRandomInterval(callback, minDelay, maxDelay) {\n                return setInterval(callback, Math.floor(Math.random() * (maxDelay - minDelay + 1)) + minDelay);\n            }\n\n            setRandomInterval(autoComplete, GM_getValue(\"minDelay\", 24000) * 1000, GM_getValue(\"maxDelay\", 360000) * 1000);\n        }\n    }\n\n    function autoComplete() {\n        const api = document.getElementsByName('stageFrame')[0]?.contentWindow?.API;\n\n        api.Frame.check();\n    }\n\n    function clickNextButton() {\n        const nextButton = document.getElementById('nextQuestion');\n        if (nextButton) {\n            nextButton.click();\n        }\n    }\n\n    function clickOverlayAttemptButton() {\n        const overlayButton = document.querySelector('.overlay-attempt.overlay-attempt-clickable');\n        const activityStatusElement = document.querySelector('#activity-status');\n        const activityStatus = activityStatusElement ? activityStatusElement.textContent.trim() : '';\n\n        if (overlayButton && !['complete', 'bypassed'].includes(activityStatus)) {\n            overlayButton.click();\n        }\n    };\n\n    function checkAndClick() {\n\n        const iframe = document.querySelector('iframe#stageFrame');\n\n        if (!iframe) {\n            return;\n        }\n\n        const navBtnList = iframe.contentDocument?.querySelector('#navBtnList');\n\n        if (!navBtnList) {\n            return;\n        }\n\n        const buttonsSelector = 'li:not(:has([class~=\"plainbtn\"].alt.icon)) a.plainbtn.alt.icon';\n        const buttons = navBtnList.querySelectorAll(buttonsSelector);\n\n        if (buttons.length === 0) {\n            const buttonSelectors = ['#submit', '.submit', 'span.uibtn.uibtn-blue.uibtn-med.submit'];\n\n            const button = buttonSelectors\n            .map(selector => iframe.contentDocument?.querySelector(selector))\n            .find(button => button);\n\n            if (button) {\n                button.click();\n            }\n        }\n\n    }\n\n    const settings = {\n        autoAnswer: GM_getValue(\"autoAnswer\", true),\n        autoStart: GM_getValue(\"autoStart\", false),\n        autoComplete: GM_getValue(\"autoComplete\", false),\n        autoSubmit: GM_getValue(\"autoSubmit\", false)\n    };\n\n    if (settings.autoStart) {\n        setInterval(clickOverlayAttemptButton, 1000);\n    }\n\n    if (settings.autoSubmit) {\n        setInterval(checkAndClick, 750);\n    }\n\n    if (settings.autoAnswer) {\n        function setRandomInterval(callback, minDelay, maxDelay) {\n            return setInterval(callback, Math.floor(Math.random() * (maxDelay - minDelay + 1)) + minDelay);\n        }\n\n        setRandomInterval(justAnswer, GM_getValue(\"minDelay\", 24000) * 1000, GM_getValue(\"maxDelay\", 360000) * 1000);\n    }\n\n})();\" ","md5":"1c8bf8beaa7cd1a6eebba5142912bd3d"},{"prompt":"Port this Userscript into NodeJS, // ==UserScript==\n// @name Initium\n// @version 11\n// @description ?\n// @match *://*.core.learn.edgenuity.com/*\n// @match *://student.edgenuity.com/*\n// @grant GM_getValue\n// @grant GM_setValue\n// ==/UserScript==\n\n(function () {\n    'use strict';\n\n    if (window.self === window.top) {\n        window.addEventListener(\"load\", () => {\n            const menuButton = document.getElementById(\"initiumMenuButton\");\n            menuButton.style.display = GM_getValue(\"menuButtonHidden\", false) ? \"none\" : \"block\";\n        });\n\n        document.addEventListener(\"keydown\", function (event) {\n            if (event.shiftKey && event.key === \"Z\") {\n                const menuContainer = document.getElementById(\"initiumMenuContainer\");\n                const backgroundOverlay = document.getElementById(\"initiumBackgroundOverlay\");\n\n                if (menuContainer.style.display === \"none\") {\n                    menuContainer.style.display = \"block\";\n                    backgroundOverlay.style.display = \"block\";\n                } else {\n                    menuContainer.style.display = \"none\";\n                    backgroundOverlay.style.display = \"none\";\n                }\n            }\n        });\n\n        document.addEventListener(\"keydown\", (event) => {\n            if (event.shiftKey && event.key === \"D\") {\n                const menuButton = document.getElementById(\"initiumMenuButton\");\n                const isHidden = menuButton.style.display === \"none\" || menuButton.style.display === \"\";\n                menuButton.style.display = isHidden ? \"block\" : \"none\";\n                GM_setValue(\"menuButtonHidden\", !isHidden);\n            }\n        });\n\n        const menuButton = document.createElement(\"button\");\n        menuButton.id = \"initiumMenuButton\";\n        menuButton.style.position = \"fixed\";\n        menuButton.style.bottom = \"20px\";\n        menuButton.style.right = \"20px\";\n        menuButton.style.zIndex = \"9999\";\n        menuButton.style.background = \"transparent\";\n        menuButton.style.border = \"none\";\n        menuButton.style.padding = \"20px\";\n        menuButton.style.cursor = \"pointer\";\n        menuButton.style.backgroundImage = 'url(\"https://cdn.discordapp.com/attachments/1125852090477051975/1182877216690942074/Y.png\")';\n        menuButton.style.backgroundSize = \"contain\";\n        const storedYPosition = GM_getValue(\"menuButtonYPosition\", \"20px\");\n        menuButton.style.bottom = storedYPosition;\n        document.body.appendChild(menuButton);\n\n        let isDragging = false;\n        let startY = 0;\n\n        menuButton.addEventListener(\"mousedown\", (e) => {\n            isDragging = true;\n            startY = e.clientY;\n        });\n\n        document.addEventListener(\"mousemove\", (e) => {\n            if (isDragging) {\n                const deltaY = startY - e.clientY;\n                const newY = parseInt(menuButton.style.bottom) + deltaY;\n\n                const minHeight = 20;\n                const maxHeight = window.innerHeight - menuButton.clientHeight - 20;\n\n                const constrainedY = Math.min(maxHeight, Math.max(minHeight, newY));\n\n                menuButton.style.bottom = `${constrainedY}px`;\n                startY = e.clientY;\n\n                GM_setValue(\"menuButtonYPosition\", `${constrainedY}px`);\n            }\n        });\n\n        document.addEventListener(\"mouseup\", () => {\n            isDragging = false;\n        });\n\n        const backgroundOverlay = document.createElement(\"div\");\n        backgroundOverlay.id = \"initiumBackgroundOverlay\";\n        backgroundOverlay.style.display = \"none\";\n        backgroundOverlay.style.position = \"fixed\";\n        backgroundOverlay.style.top = \"0\";\n        backgroundOverlay.style.left = \"0\";\n        backgroundOverlay.style.width = \"100%\";\n        backgroundOverlay.style.height = \"100%\";\n        backgroundOverlay.style.backgroundColor = \"rgba(0, 0, 0, 0.5)\";\n        backgroundOverlay.style.zIndex = \"9998\";\n        backgroundOverlay.style.backdropFilter = \"grayscale(100%)\";\n        document.body.appendChild(backgroundOverlay);\n\n        backgroundOverlay.addEventListener(\"click\", () => {\n            toggleMenu();\n        });\n\n        const menuContainer = document.createElement(\"div\");\n        menuContainer.id = \"initiumMenuContainer\";\n        menuContainer.style.display = \"none\";\n        menuContainer.style.position = \"fixed\";\n        menuContainer.style.fontFamily = \"Roboto, sans-serif\";\n        menuContainer.style.userSelect = 'none';\n        menuContainer.style.top = \"50%\";\n        menuContainer.style.background = \"linear-gradient(45deg, #001424, #2A87DE)\";\n        menuContainer.style.left = \"50%\";\n        menuContainer.style.transform = \"translate(-50%, -50%)\";\n        menuContainer.style.zIndex = \"9999\";\n        menuContainer.style.width = \"400px\";\n        menuContainer.style.padding = \"30px\";\n        menuContainer.style.color = \"#FFF\";\n        menuContainer.style.borderRadius = \"10px\";\n        menuContainer.style.boxShadow = \"0px 0px 10px rgba(0, 0, 0, 0.5)\";\n        menuContainer.style.transition = \"transform 0.2s ease-in-out\";\n        document.body.appendChild(menuContainer);\n\n        const titleElement = document.createElement(\"h2\");\n        titleElement.style.textAlign = \"center\";\n        titleElement.style.marginBottom = \"10px\";\n        titleElement.style.fontWeight = \"100\";\n        titleElement.style.fontSize = \"24px\";\n        titleElement.textContent = \"⸻ Initium 1.0 ⸻\";\n        menuContainer.appendChild(titleElement);\n\n        const applyBtn = document.createElement(\"button\");\n        applyBtn.textContent = \"Apply changes?\";\n        applyBtn.style.marginTop = \"10px\";\n        applyBtn.style.padding = \"5px 10px\";\n        applyBtn.style.backgroundColor = \"#111\";\n        applyBtn.style.color = \"#FFF\";\n        applyBtn.style.border = \"none\";\n        applyBtn.style.borderRadius = \"5px\";\n        applyBtn.style.cursor = \"pointer\";\n        applyBtn.style.border = \"1px solid transparent\";\n        applyBtn.style.transition = \"border-color 0.1s ease-out\";\n\n        applyBtn.addEventListener(\"mouseenter\", () => {\n            applyBtn.style.borderColor = \"#FFF\";\n        });\n\n        applyBtn.addEventListener(\"mouseleave\", () => {\n            applyBtn.style.borderColor = \"transparent\";\n        });\n        applyBtn.addEventListener(\"click\", () => {\n            location.reload();\n        });\n        menuContainer.appendChild(applyBtn);\n\n        const minDelayContainer = document.createElement(\"div\");\n        minDelayContainer.style.display = \"flex\";\n        minDelayContainer.style.flexDirection = \"row\";\n\n        const minDelayInput = document.createElement(\"input\");\n        minDelayInput.type = \"number\";\n        minDelayInput.value = GM_getValue(\"minDelay\", 500); \n        minDelayInput.placeholder = \"Set minimum delay (24s recommended)\";\n        minDelayInput.style.marginTop = \"10px\";\n        minDelayInput.style.padding = \"5px 10px\";\n        minDelayInput.style.border = \"none\";\n        minDelayInput.style.borderRadius = \"5px\";\n        minDelayInput.style.flex = \"1\"; \n        minDelayInput.style.backgroundColor = \"#111\"; \n        minDelayInput.style.color = \"#FFF\"; \n        minDelayContainer.appendChild(minDelayInput);\n\n        const setMinDelayButton = document.createElement(\"button\");\n        setMinDelayButton.textContent = \"Set Min Delay\";\n        setMinDelayButton.style.marginTop = \"10px\";\n        setMinDelayButton.style.marginLeft = \"10px\";\n        setMinDelayButton.style.padding = \"5px 10px\";\n        setMinDelayButton.style.backgroundColor = \"#111\";\n        setMinDelayButton.style.color = \"#FFF\";\n        setMinDelayButton.style.border = \"none\";\n        setMinDelayButton.style.borderRadius = \"5px\";\n        setMinDelayButton.style.cursor = \"pointer\";\n        setMinDelayButton.addEventListener(\"click\", () => {\n            const newMinDelay = parseInt(minDelayInput.value, 10) || 500;\n            GM_setValue(\"minDelay\", newMinDelay);\n        });\n\n        minDelayContainer.appendChild(setMinDelayButton);\n\n        menuContainer.appendChild(minDelayContainer);\n\n        const maxDelayContainer = document.createElement(\"div\");\n        maxDelayContainer.style.display = \"flex\";\n        maxDelayContainer.style.flexDirection = \"row\";\n\n        const maxDelayInput = document.createElement(\"input\");\n        maxDelayInput.type = \"number\";\n        maxDelayInput.value = GM_getValue(\"maxDelay\", 1000); \n        maxDelayInput.placeholder = \"Set maximum delay (36s recommended)\";\n        maxDelayInput.style.marginTop = \"10px\";\n        maxDelayInput.style.padding = \"5px 10px\";\n        maxDelayInput.style.border = \"none\";\n        maxDelayInput.style.borderRadius = \"5px\";\n        maxDelayInput.style.flex = \"1\"; \n        maxDelayInput.style.backgroundColor = \"#111\"; \n        maxDelayInput.style.color = \"#FFF\"; \n        maxDelayContainer.appendChild(maxDelayInput);\n\n        const setMaxDelayButton = document.createElement(\"button\");\n        setMaxDelayButton.textContent = \"Set Max Delay\";\n        setMaxDelayButton.style.marginTop = \"10px\";\n        setMaxDelayButton.style.marginLeft = \"10px\";\n        setMaxDelayButton.style.padding = \"5px 10px\";\n        setMaxDelayButton.style.backgroundColor = \"#111\";\n        setMaxDelayButton.style.color = \"#FFF\";\n        setMaxDelayButton.style.border = \"none\";\n        setMaxDelayButton.style.borderRadius = \"5px\";\n        setMaxDelayButton.style.cursor = \"pointer\";\n        setMaxDelayButton.addEventListener(\"click\", () => {\n            const newMaxDelay = parseInt(maxDelayInput.value, 10) || 1000;\n            GM_setValue(\"maxDelay\", newMaxDelay);\n        });\n\n        maxDelayContainer.appendChild(setMaxDelayButton);\n\n        menuContainer.appendChild(maxDelayContainer);\n\n        const toggleMenu = () => {\n            const display = menuContainer.style.display === \"none\" ? \"block\" : \"none\";\n            menuContainer.style.display = display;\n            backgroundOverlay.style.display = display;\n        };\n\n        menuButton.addEventListener(\"click\", toggleMenu);\n\n        const settings = {\n            autoAnswer: GM_getValue(\"autoAnswer\", true),\n            autoStart: GM_getValue(\"autoStart\", false),\n            autoComplete: GM_getValue(\"autoComplete\", false),\n            autoSubmit: GM_getValue(\"autoSubmit\", false),\n        };\n\n        const buttonList = document.createElement(\"ul\");\n        buttonList.style.listStyleType = \"none\";\n        buttonList.style.padding = \"0\";\n\n        const buttonLabels = {\n            autoAnswer: \"Auto Answer\",\n            autoStart: \"Auto Start\",\n            autoComplete: \"Auto Complete\",\n            autoSubmit: \"Auto Submit\",\n        };\n\n        const buttonDescriptions = {\n            autoAnswer: \"Automatically answers questions.\",\n            autoStart: \"Automatically starts any quizzes.\",\n            autoComplete: \"Automatically completes questions on assignments when answered.\",\n            autoSubmit: \"Automatically submits quizzes.\"\n        };\n\n        for (const setting in settings) {\n            if (settings.hasOwnProperty(setting)) {\n                const button = document.createElement(\"button\");\n                button.className = \"setting-button\";\n                button.textContent = buttonLabels[setting];\n                button.title = buttonDescriptions[setting];\n                button.style.marginTop = \"10px\";\n                button.style.padding = \"5px 15px 5px 40px\";\n                button.style.backgroundColor = \"#111\";\n                button.style.color = \"#FFF\";\n                button.style.border = \"none\";\n                button.style.borderRadius = \"5px\";\n                button.style.cursor = \"pointer\";\n                button.style.display = \"block\";\n                button.style.width = \"100%\";\n                button.style.textAlign = \"left\";\n\n                const imageUrls = {\n                    autoAnswer: \"https://cdn.discordapp.com/attachments/1125852090477051975/1182881314471428207/5.png\",\n                    autoStart: 'https://cdn.discordapp.com/attachments/1125852090477051975/1182881313892601896/q.png',\n                    autoComplete: 'https://cdn.discordapp.com/attachments/1125852090477051975/1183038030433497138/p.png',\n                    autoSubmit: 'https://cdn.discordapp.com/attachments/1125852090477051975/1183042721812860928/3.png'\n                };\n\n                button.style.border = \"1px solid transparent\";\n                button.style.transition = \"border-color 0.1s ease-out\";\n\n                button.addEventListener(\"mouseenter\", () => {\n                    button.style.borderColor = \"#FFF\";\n                });\n\n                button.addEventListener(\"mouseleave\", () => {\n                    button.style.borderColor = \"transparent\";\n                });\n\n                button.style.backgroundImage = `url('${imageUrls[setting]}')`;\n                button.style.backgroundSize = \"30px 30px\";\n                button.style.backgroundRepeat = \"no-repeat\";\n                button.style.backgroundPosition = \"10px center\";\n\n                const enabledIndicator = document.createElement(\"img\");\n                enabledIndicator.src = \"https://raw.githubusercontent.com/Databones/Edgesploit/main/img/enabled.png\";\n                enabledIndicator.alt = \"enabled\";\n                enabledIndicator.style.width = \"20%\";\n\n                const disabledIndicator = document.createElement(\"img\");\n                disabledIndicator.src = \"https://raw.githubusercontent.com/Databones/Edgesploit/main/img/disabled.png\";\n                disabledIndicator.alt = \"disabled\";\n                disabledIndicator.style.width = \"20%\";\n\n                button.appendChild(enabledIndicator);\n                button.appendChild(disabledIndicator);\n\n                enabledIndicator.style.display = settings[setting] ? \"inline\" : \"none\";\n                disabledIndicator.style.display = settings[setting] ? \"none\" : \"inline\";\n\n                button.addEventListener(\"click\", () => {\n                    settings[setting] = !settings[setting];\n                    GM_setValue(setting, settings[setting]);\n\n                    enabledIndicator.style.display = settings[setting] ? \"inline\" : \"none\";\n                    disabledIndicator.style.display = settings[setting] ? \"none\" : \"inline\";\n                });\n\n                const listItem = document.createElement(\"li\");\n                listItem.appendChild(button);\n                buttonList.appendChild(listItem);\n            }\n        }\n\n        menuContainer.appendChild(buttonList);\n\n    };\n\n    let answerClicked = false;\n\n    async function getAnswersFromStorage() {\n        const storedAnswers = GM_getValue(\"answers\");\n\n        if (storedAnswers) {\n            return storedAnswers;\n        }\n\n        return new Promise(async (resolve, reject) => {\n            const answersText = prompt(\"Paste your answers text here:\");\n\n            if (answersText) {\n                GM_setValue(\"answers\", answersText);\n                resolve(answersText);\n            } else {\n                reject(new Error(\"No answer text entered. You need to paste the answers in.\"));\n            }\n        });\n    }\n\n    function answerQuiz() {\n        const processElements = (elements) => {\n            elements.forEach((element) => {\n                const id = element.getAttribute(\"for\") || element.getAttribute(\"id\");\n                if (id && answerIDs.includes(id.trim())) {\n                    if (element.tagName === \"LABEL\") {\n                        element.click();\n                    } else if (element.tagName === \"OPTION\") {\n                        element.selected = true;\n                    } else if (element.tagName === \"INPUT\" && element.type === \"checkbox\") {\n                        element.checked = true;\n                    } else if (element.tagName === \"INPUT\" && element.type === \"text\") {\n                        const answerText = getAnswerTextById(id.trim());\n                        if (answerText) {\n                            element.value = answerText;\n                        }\n                    }\n                }\n            });\n        };\n\n        const parentElement = document.body; \n\n        const querySelectors = [\n            \".answer-choice-label[for]\",\n            \"option[id]\",\n            \"input[type='checkbox'][id]\",\n            \"input[type='text'][id]\"\n        ];\n\n        const elementsToClick = [];\n\n        querySelectors.forEach((selector) => {\n            elementsToClick.push(...parentElement.querySelectorAll(selector));\n        });\n\n        const iframe = document.querySelector(\"iframe\");\n\n        if (iframe && iframe.contentDocument) {\n            const iframeElements = [];\n\n            querySelectors.forEach((selector) => {\n                iframeElements.push(...iframe.contentDocument.querySelectorAll(selector));\n            });\n\n            elementsToClick.push(...iframeElements);\n        }\n\n        processElements(elementsToClick);\n    }\n\n    function getAnswerTextById(id) {\n        const answers = answerIDs.split(\"\\n\");\n        for (const answer of answers) {\n            const [answerId, answerText] = answer.split(\":\");\n            if (answerId.trim() === id.trim()) {\n                return answerText.trim().replace(/\"/g, ''); // Remove quotation marks\n            }\n        }\n        return null;\n    }\n\n    let answerIDs = [];\n\n    getAnswersFromStorage().then((answerIDsFromStorage) => {\n        answerIDs = answerIDsFromStorage;\n    });\n\n    function justAnswer() {\n        answerQuiz();\n        clickNextButton();\n        if (settings.autoComplete) {\n            function setRandomInterval(callback, minDelay, maxDelay) {\n                return setInterval(callback, Math.floor(Math.random() * (maxDelay - minDelay + 1)) + minDelay);\n            }\n\n            setRandomInterval(autoComplete, GM_getValue(\"minDelay\", 24000) * 1000, GM_getValue(\"maxDelay\", 360000) * 1000);\n        }\n    }\n\n    function autoComplete() {\n        const api = document.getElementsByName('stageFrame')[0]?.contentWindow?.API;\n\n        api.Frame.check();\n    }\n\n    function clickNextButton() {\n        const nextButton = document.getElementById('nextQuestion');\n        if (nextButton) {\n            nextButton.click();\n        }\n    }\n\n    function clickOverlayAttemptButton() {\n        const overlayButton = document.querySelector('.overlay-attempt.overlay-attempt-clickable');\n        const activityStatusElement = document.querySelector('#activity-status');\n        const activityStatus = activityStatusElement ? activityStatusElement.textContent.trim() : '';\n\n        if (overlayButton && !['complete', 'bypassed'].includes(activityStatus)) {\n            overlayButton.click();\n        }\n    };\n\n    function checkAndClick() {\n\n        const iframe = document.querySelector('iframe#stageFrame');\n\n        if (!iframe) {\n            return;\n        }\n\n        const navBtnList = iframe.contentDocument?.querySelector('#navBtnList');\n\n        if (!navBtnList) {\n            return;\n        }\n\n        const buttonsSelector = 'li:not(:has([class~=\"plainbtn\"].alt.icon)) a.plainbtn.alt.icon';\n        const buttons = navBtnList.querySelectorAll(buttonsSelector);\n\n        if (buttons.length === 0) {\n            const buttonSelectors = ['#submit', '.submit', 'span.uibtn.uibtn-blue.uibtn-med.submit'];\n\n            const button = buttonSelectors\n            .map(selector => iframe.contentDocument?.querySelector(selector))\n            .find(button => button);\n\n            if (button) {\n                button.click();\n            }\n        }\n\n    }\n\n    const settings = {\n        autoAnswer: GM_getValue(\"autoAnswer\", true),\n        autoStart: GM_getValue(\"autoStart\", false),\n        autoComplete: GM_getValue(\"autoComplete\", false),\n        autoSubmit: GM_getValue(\"autoSubmit\", false)\n    };\n\n    if (settings.autoStart) {\n        setInterval(clickOverlayAttemptButton, 1000);\n    }\n\n    if (settings.autoSubmit) {\n        setInterval(checkAndClick, 750);\n    }\n\n    if (settings.autoAnswer) {\n        function setRandomInterval(callback, minDelay, maxDelay) {\n            return setInterval(callback, Math.floor(Math.random() * (maxDelay - minDelay + 1)) + minDelay);\n        }\n\n        setRandomInterval(justAnswer, GM_getValue(\"minDelay\", 24000) * 1000, GM_getValue(\"maxDelay\", 360000) * 1000);\n    }\n\n})();","md5":"47283e3f7352b087c5600a9e25e1854e"}]}